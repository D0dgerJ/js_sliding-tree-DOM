{"mappings":"ACEA,IAAM,EAAO,SAAS,aAAa,CAAC,SAEpC,EAAK,gBAAgB,CAAC,QAAS,SAAC,CAAhC,EACE,GAAI,AAAqB,SAArB,EAAE,MAAM,CAAC,OAAO,EAIpB,IAAM,EAAU,EAAE,MAAM,CAAC,kBAAkB,CAEvC,GAAW,AAAoB,OAApB,EAAQ,OAAO,EAC5B,CAAA,EAAQ,MAAM,CAAG,CAAC,EAAQ,MAAM,AAAN,EAE9B,GAEA,IAAM,EAAoB,SAAC,CAA3B,EACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,EAAE,gBAAgB,CAAC,KAAA,CAAA,OAAA,QAAA,CAAA,GAA/B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAsC,CAAtC,IAAM,EAAN,EAAA,KAAA,CACG,EAAa,EAAG,UAAU,CAEhC,GAAI,EAAW,QAAQ,GAAK,KAAK,SAAS,CAAE,CAC1C,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,CAAA,EAAK,WAAW,CAAG,EAAW,WAAW,CAAC,IAAI,GAC9C,EAAG,YAAY,CAAC,EAAM,EACxB,CAEA,IAAM,EAAU,EAAG,aAAa,CAAC,MAE7B,GACF,EAAkB,EAEtB,C,C,M,E,CAfK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAgBP,EAEA,EAAkB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar tree = document.querySelector(\".tree\");\ntree.addEventListener(\"click\", function(e) {\n    if (e.target.tagName !== \"SPAN\") return;\n    var subTree = e.target.nextElementSibling;\n    if (subTree && subTree.tagName === \"UL\") subTree.hidden = !subTree.hidden;\n});\nvar addSpansToHeaders = function(p) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = p.querySelectorAll(\"li\")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var li = _step.value;\n            var headerText = li.firstChild;\n            if (headerText.nodeType === Node.TEXT_NODE) {\n                var span = document.createElement(\"span\");\n                span.textContent = headerText.textContent.trim();\n                li.replaceChild(span, headerText);\n            }\n            var childUl = li.querySelector(\"ul\");\n            if (childUl) addSpansToHeaders(childUl);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\naddSpansToHeaders(tree);\n\n//# sourceMappingURL=index.4472d7d9.js.map\n","'use strict';\n\nconst tree = document.querySelector('.tree');\n\ntree.addEventListener('click', (e) => {\n  if (e.target.tagName !== 'SPAN') {\n    return;\n  }\n\n  const subTree = e.target.nextElementSibling;\n\n  if (subTree && subTree.tagName === 'UL') {\n    subTree.hidden = !subTree.hidden;\n  }\n});\n\nconst addSpansToHeaders = (p) => {\n  for (const li of p.querySelectorAll('li')) {\n    const headerText = li.firstChild;\n\n    if (headerText.nodeType === Node.TEXT_NODE) {\n      const span = document.createElement('span');\n\n      span.textContent = headerText.textContent.trim();\n      li.replaceChild(span, headerText);\n    }\n\n    const childUl = li.querySelector('ul');\n\n    if (childUl) {\n      addSpansToHeaders(childUl);\n    }\n  }\n};\n\naddSpansToHeaders(tree);\n"],"names":["tree","document","querySelector","addEventListener","e","target","tagName","subTree","nextElementSibling","hidden","addSpansToHeaders","p","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","querySelectorAll","Symbol","iterator","next","done","li","value","headerText","firstChild","nodeType","Node","TEXT_NODE","span","createElement","textContent","trim","replaceChild","childUl","err","return"],"version":3,"file":"index.4472d7d9.js.map"}